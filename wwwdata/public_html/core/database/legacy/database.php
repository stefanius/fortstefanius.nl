<?php

abstract class Database
{
    protected function __construct() {}
    
    /**
     * Returns a database drive object of requested type.
     *
     * @var string $name  name of the driver we want to use.
     * @return object
     * @throws Exception  if driver requested is not found.
     */
    public static function load($name)
    {
        $driver = dirname(__FILE__) . "/drivers/" . strtolower($name) . ".php";
        $result = dirname(__FILE__) . "/result/" . strtolower($name) . ".php";
        $abstractresult = dirname(__FILE__) . "/result/result.php";
        
        if (!is_readable($driver)) {
            throw new Exception("SQL driver not found: " . $driver);
        }

        if (!is_readable($result)) {
            throw new Exception("SQL driver (result-extension) not found: " . $result);
        }
        
        if (!is_readable($abstractresult)) {
            throw new Exception("Base result file not found (abstract, needed for driver/result): " . $abstractresult);
        }        
        include_once $driver;
        include_once $abstractresult;
        include_once $result;
        
        $classname = "SQLDriver" . $name;
        return new $classname;
    }
    
    /**
     * Connect
     *
     * Establishes the link with the server instance and attempts
     * to select the database passed to the constructor (if not null).
     *
     * @param string $hostname  a string with the hostname.
     * @param string $username  a string with the username.
     * @param string $password  a string with the (plain) password.
     * @param string $database  a string with the database to select.
     * @return void
     * @throws Exception  if connection to server could not be made.
     */
    abstract public function connect($hostname, $username, $password, $database);

    /**
     * Run select query (on current database, or given)
     *
     * This function should only be used in the case of SELECT queries, due
     * to the nature of its return value. A MySQLResult object will be
     * generated, which can be looped in a while/foreach structure just like
     * any regular array.
     *
     * @param string $sql  a string with with the sql to execute.
     * @param string $database  a string with the database name to run query on.
     * @return Result  a result object.
     * @throws Exception  if query could not be executed.
     */
    abstract public function select($sql);
    
    /**
     * Run insert query (on current database, or given)
     *
     * This function should only be used in the case of INSERT queries,
     * as it will attempt to return the ID generated for the inserted row.
     *
     * @param string $sql  a string with with the sql to execute.
     * @param string $database  a string with the database name to run query on.
     * @return integer  ID generated by AUTO_INCREMENT column for inserted row.
     * @throws Exception  if query could not be executed.
     */
    abstract public function insert($sql);
    
    /**
     * Run alter query (on current database, or given)
     *
     * This function should be used for UPDATE or DELETE statements. It will
     * return an integer count of the amount of affected rows.
     *
     * @param string $sql  a string with with the sql to execute.
     * @param string $database  a string with the database name to run query on.
     * @return integer  an integer of how many rows have been affected.
     * @throws Exception  if query could not be executed.
     */
    abstract public function alter($sql);
}